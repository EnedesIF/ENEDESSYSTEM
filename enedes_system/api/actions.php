<?php
require_once 'config.php';

$method = $_SERVER['REQUEST_METHOD'];
$input = json_decode(file_get_contents('php://input'), true);

switch ($method) {
    case 'GET':
        // LISTAR TODAS AS A√á√ïES
        $stmt = $pdo->query("SELECT * FROM acoes ORDER BY id ASC");
        $acoes = $stmt->fetchAll(PDO::FETCH_ASSOC);
        echo json_encode($acoes);
        break;

    case 'POST':
        // INSERIR NOVA A√á√ÉO
        if (isset($input['meta_id'], $input['descricao'])) {
            $stmt = $pdo->prepare("INSERT INTO acoes (meta_id, descricao) VALUES (:meta_id, :descricao)");
            $stmt->execute([
                ':meta_id'   => $input['meta_id'],
                ':descricao' => $input['descricao']
            ]);
            echo json_encode(['status' => 'success', 'message' => 'A√ß√£o inserida com sucesso']);
        } else {
            http_response_code(400);
            echo json_encode(['status' => 'error', 'message' => 'Dados incompletos']);
        }
        break;

    case 'PUT':
        // ATUALIZAR A√á√ÉO
        parse_str($_SERVER['QUERY_STRING'], $params);
        if (isset($params['id'], $input['meta_id'], $input['descricao'])) {
            $stmt = $pdo->prepare("UPDATE acoes SET meta_id = :meta_id, descricao = :descricao WHERE id = :id");
            $stmt->execute([
                ':id'        => $params['id'],
                ':meta_id'   => $input['meta_id'],
                ':descricao' => $input['descricao']
            ]);
            echo json_encode(['status' => 'success', 'message' => 'A√ß√£o atualizada com sucesso']);
        } else {
            http_response_code(400);
            echo json_encode(['status' => 'error', 'message' => 'Dados incompletos']);
        }
        break;

    case 'DELETE':
        // DELETAR A√á√ÉO
        parse_str($_SERVER['QUERY_STRING'], $params);
        if (isset($params['id'])) {
            $stmt = $pdo->prepare("DELETE FROM acoes WHERE id = :id");
            $stmt->execute([':id' => $params['id']]);
            echo json_encode(['status' => 'success', 'message' => 'A√ß√£o removida com sucesso']);
        } else {
            http_response_code(400);
            echo json_encode(['status' => 'error', 'message' => 'ID n√£o informado']);
        }
        break;
}
<?php
require_once 'config.php';

// üîç LOGS PARA DEBUG
error_log("üîç === ACTIONS.PHP CHAMADO ===");
error_log("üîç M√©todo: " . $_SERVER['REQUEST_METHOD']);
error_log("üîç Headers: " . print_r(getallheaders(), true));

$method = $_SERVER['REQUEST_METHOD'];
$input = json_decode(file_get_contents('php://input'), true);

error_log("üîç Input recebido: " . print_r($input, true));
error_log("üîç Raw input: " . file_get_contents('php://input'));

switch ($method) {
    case 'GET':
        error_log("üîç Executando GET - Listar a√ß√µes");
        try {
            $stmt = $pdo->query("SELECT * FROM acoes ORDER BY id ASC");
            $acoes = $stmt->fetchAll(PDO::FETCH_ASSOC);
            error_log("üîç Encontradas " . count($acoes) . " a√ß√µes");
            echo json_encode($acoes);
        } catch (Exception $e) {
            error_log("‚ùå Erro no GET: " . $e->getMessage());
            echo json_encode(['error' => $e->getMessage()]);
        }
        break;
        
    case 'POST':
        error_log("üîç Executando POST - Inserir nova a√ß√£o");
        error_log("üîç Verificando campos obrigat√≥rios...");
        error_log("üîç meta_id existe? " . (isset($input['meta_id']) ? 'SIM' : 'N√ÉO'));
        error_log("üîç descricao existe? " . (isset($input['descricao']) ? 'SIM' : 'N√ÉO'));
        
        if (isset($input['meta_id'], $input['descricao'])) {
            try {
                error_log("üîç Preparando query INSERT...");
                $stmt = $pdo->prepare("INSERT INTO acoes (meta_id, descricao) VALUES (:meta_id, :descricao)");
                
                error_log("üîç Executando INSERT com dados:");
                error_log("üîç meta_id: " . $input['meta_id']);
                error_log("üîç descricao: " . $input['descricao']);
                
                $result = $stmt->execute([
                    ':meta_id'   => $input['meta_id'],
                    ':descricao' => $input['descricao']
                ]);
                
                if ($result) {
                    $lastId = $pdo->lastInsertId();
                    error_log("‚úÖ INSERT executado com sucesso! ID: " . $lastId);
                    echo json_encode(['status' => 'success', 'message' => 'A√ß√£o inserida com sucesso', 'id' => $lastId]);
                } else {
                    error_log("‚ùå INSERT falhou - sem erro espec√≠fico");
                    $errorInfo = $stmt->errorInfo();
                    error_log("‚ùå Error Info: " . print_r($errorInfo, true));
                    echo json_encode(['status' => 'error', 'message' => 'Falha ao inserir']);
                }
                
            } catch (Exception $e) {
                error_log("‚ùå Erro no POST: " . $e->getMessage());
                http_response_code(500);
                echo json_encode(['status' => 'error', 'message' => $e->getMessage()]);
            }
        } else {
            error_log("‚ùå Dados incompletos recebidos");
            http_response_code(400);
            echo json_encode(['status' => 'error', 'message' => 'Dados incompletos']);
        }
        break;
        
    // ... resto do c√≥digo (PUT, DELETE)
}
?>
<?php
require_once 'config.php';

// üîç LOGS PARA DEBUG
error_log("üîç === ACTIONS.PHP CHAMADO ===");
error_log("üîç M√©todo: " . $_SERVER['REQUEST_METHOD']);
error_log("üîç Headers: " . print_r(getallheaders(), true));

$method = $_SERVER['REQUEST_METHOD'];
$input = json_decode(file_get_contents('php://input'), true);

error_log("üîç Input recebido: " . print_r($input, true));
error_log("üîç Raw input: " . file_get_contents('php://input'));

switch ($method) {
    case 'GET':
        error_log("üîç Executando GET - Listar a√ß√µes");
        try {
            // MUDAN√áA: acoes -> actions
            $stmt = $pdo->query("SELECT * FROM actions ORDER BY id ASC");
            $actions = $stmt->fetchAll(PDO::FETCH_ASSOC);
            error_log("üîç Encontradas " . count($actions) . " a√ß√µes");
            echo json_encode($actions);
        } catch (Exception $e) {
            error_log("‚ùå Erro no GET: " . $e->getMessage());
            echo json_encode(['error' => $e->getMessage()]);
        }
        break;
        
    case 'POST':
        error_log("üîç Executando POST - Inserir nova a√ß√£o");
        error_log("üîç Verificando campos obrigat√≥rios...");
        error_log("üîç meta_id existe? " . (isset($input['meta_id']) ? 'SIM' : 'N√ÉO'));
        error_log("üîç descricao existe? " . (isset($input['descricao']) ? 'SIM' : 'N√ÉO'));
        
        if (isset($input['meta_id'], $input['descricao'])) {
            try {
                error_log("üîç Preparando query INSERT...");
                // MUDAN√áA: acoes -> actions
                $stmt = $pdo->prepare("INSERT INTO actions (meta_id, descricao) VALUES (:meta_id, :descricao)");
                
                error_log("üîç Executando INSERT com dados:");
                error_log("üîç meta_id: " . $input['meta_id']);
                error_log("üîç descricao: " . $input['descricao']);
                
                $result = $stmt->execute([
                    ':meta_id'   => $input['meta_id'],
                    ':descricao' => $input['descricao']
                ]);
                
                if ($result) {
                    $lastId = $pdo->lastInsertId();
                    error_log("‚úÖ INSERT executado com sucesso! ID: " . $lastId);
                    echo json_encode(['status' => 'success', 'message' => 'A√ß√£o inserida com sucesso', 'id' => $lastId]);
                } else {
                    error_log("‚ùå INSERT falhou - sem erro espec√≠fico");
                    $errorInfo = $stmt->errorInfo();
                    error_log("‚ùå Error Info: " . print_r($errorInfo, true));
                    echo json_encode(['status' => 'error', 'message' => 'Falha ao inserir']);
                }
                
            } catch (Exception $e) {
                error_log("‚ùå Erro no POST: " . $e->getMessage());
                http_response_code(500);
                echo json_encode(['status' => 'error', 'message' => $e->getMessage()]);
            }
        } else {
            error_log("‚ùå Dados incompletos recebidos");
            http_response_code(400);
            echo json_encode(['status' => 'error', 'message' => 'Dados incompletos']);
        }
        break;
        
    case 'PUT':
        // ATUALIZAR A√á√ÉO
        parse_str($_SERVER['QUERY_STRING'], $params);
        if (isset($params['id'], $input['meta_id'], $input['descricao'])) {
            try {
                // MUDAN√áA: acoes -> actions
                $stmt = $pdo->prepare("UPDATE actions SET meta_id = :meta_id, descricao = :descricao WHERE id = :id");
                $stmt->execute([
                    ':id'        => $params['id'],
                    ':meta_id'   => $input['meta_id'],
                    ':descricao' => $input['descricao']
                ]);
                echo json_encode(['status' => 'success', 'message' => 'A√ß√£o atualizada com sucesso']);
            } catch (Exception $e) {
                error_log("‚ùå Erro no PUT: " . $e->getMessage());
                echo json_encode(['status' => 'error', 'message' => $e->getMessage()]);
            }
        } else {
            http_response_code(400);
            echo json_encode(['status' => 'error', 'message' => 'Dados incompletos']);
        }
        break;
        
    case 'DELETE':
        // DELETAR A√á√ÉO
        parse_str($_SERVER['QUERY_STRING'], $params);
        if (isset($params['id'])) {
            try {
                // MUDAN√áA: acoes -> actions
                $stmt = $pdo->prepare("DELETE FROM actions WHERE id = :id");
                $stmt->execute([':id' => $params['id']]);
                echo json_encode(['status' => 'success', 'message' => 'A√ß√£o removida com sucesso']);
            } catch (Exception $e) {
                error_log("‚ùå Erro no DELETE: " . $e->getMessage());
                echo json_encode(['status' => 'error', 'message' => $e->getMessage()]);
            }
        } else {
            http_response_code(400);
            echo json_encode(['status' => 'error', 'message' => 'ID n√£o informado']);
        }
        break;
}
?>
